/* Generated By:JavaCC: Do not edit this line. CompiladorC_SharpConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorC_SharpConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Namespace = 1;
  /** RegularExpression Id. */
  int Using = 2;
  /** RegularExpression Id. */
  int Clase = 3;
  /** RegularExpression Id. */
  int Privado = 4;
  /** RegularExpression Id. */
  int Publico = 5;
  /** RegularExpression Id. */
  int Protegido = 6;
  /** RegularExpression Id. */
  int Funcion = 7;
  /** RegularExpression Id. */
  int Main = 8;
  /** RegularExpression Id. */
  int Retorno = 9;
  /** RegularExpression Id. */
  int Goto = 10;
  /** RegularExpression Id. */
  int If = 11;
  /** RegularExpression Id. */
  int Else = 12;
  /** RegularExpression Id. */
  int For = 13;
  /** RegularExpression Id. */
  int Do = 14;
  /** RegularExpression Id. */
  int While = 15;
  /** RegularExpression Id. */
  int Switch = 16;
  /** RegularExpression Id. */
  int Case = 17;
  /** RegularExpression Id. */
  int Break = 18;
  /** RegularExpression Id. */
  int Default = 19;
  /** RegularExpression Id. */
  int Continue = 20;
  /** RegularExpression Id. */
  int Void = 21;
  /** RegularExpression Id. */
  int Static = 22;
  /** RegularExpression Id. */
  int Integer = 23;
  /** RegularExpression Id. */
  int Float = 24;
  /** RegularExpression Id. */
  int String = 25;
  /** RegularExpression Id. */
  int Char = 26;
  /** RegularExpression Id. */
  int Booleano = 27;
  /** RegularExpression Id. */
  int Entero = 28;
  /** RegularExpression Id. */
  int Cadena = 29;
  /** RegularExpression Id. */
  int Caracter = 30;
  /** RegularExpression Id. */
  int Flotante = 31;
  /** RegularExpression Id. */
  int True = 32;
  /** RegularExpression Id. */
  int False = 33;
  /** RegularExpression Id. */
  int Nulo = 34;
  /** RegularExpression Id. */
  int Console = 35;
  /** RegularExpression Id. */
  int WriteLine = 36;
  /** RegularExpression Id. */
  int Write = 37;
  /** RegularExpression Id. */
  int ReadLine = 38;
  /** RegularExpression Id. */
  int ReadKey = 39;
  /** RegularExpression Id. */
  int LlaveIzquierda = 40;
  /** RegularExpression Id. */
  int LlaveDerecha = 41;
  /** RegularExpression Id. */
  int ParentesisDerecho = 42;
  /** RegularExpression Id. */
  int ParentesisIzquierdo = 43;
  /** RegularExpression Id. */
  int CierreSentencia = 44;
  /** RegularExpression Id. */
  int Punto = 45;
  /** RegularExpression Id. */
  int DosPuntos = 46;
  /** RegularExpression Id. */
  int Coma = 47;
  /** RegularExpression Id. */
  int ArregloIzquierdo = 48;
  /** RegularExpression Id. */
  int ArregloDerecho = 49;
  /** RegularExpression Id. */
  int Suma = 50;
  /** RegularExpression Id. */
  int Resta = 51;
  /** RegularExpression Id. */
  int Multiplicacion = 52;
  /** RegularExpression Id. */
  int Division = 53;
  /** RegularExpression Id. */
  int Modulo = 54;
  /** RegularExpression Id. */
  int IgualA = 55;
  /** RegularExpression Id. */
  int SumaIgualA = 56;
  /** RegularExpression Id. */
  int RestaIgualA = 57;
  /** RegularExpression Id. */
  int MultiplicacionIgualA = 58;
  /** RegularExpression Id. */
  int DivisionIgualA = 59;
  /** RegularExpression Id. */
  int ModuloIgualA = 60;
  /** RegularExpression Id. */
  int Incremento = 61;
  /** RegularExpression Id. */
  int Decremento = 62;
  /** RegularExpression Id. */
  int IgualQue = 63;
  /** RegularExpression Id. */
  int MenorQue = 64;
  /** RegularExpression Id. */
  int MayorQue = 65;
  /** RegularExpression Id. */
  int MenorIgualQue = 66;
  /** RegularExpression Id. */
  int MayorIgualQue = 67;
  /** RegularExpression Id. */
  int DiferenteQue = 68;
  /** RegularExpression Id. */
  int And = 69;
  /** RegularExpression Id. */
  int Or = 70;
  /** RegularExpression Id. */
  int Identificador = 71;
  /** RegularExpression Id. */
  int ComentarioLinea = 72;
  /** RegularExpression Id. */
  int ComentarioInicio = 73;
  /** RegularExpression Id. */
  int ComentarioTermino = 74;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"namespace\"",
    "\"using\"",
    "\"class\"",
    "\"private\"",
    "\"public\"",
    "\"protected\"",
    "\"funcion\"",
    "\"main\"",
    "\"return\"",
    "\"goto\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"do\"",
    "\"while\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"default\"",
    "\"continue\"",
    "\"void\"",
    "\"static\"",
    "\"int\"",
    "\"float\"",
    "\"string\"",
    "\"char\"",
    "\"bool\"",
    "<Entero>",
    "<Cadena>",
    "<Caracter>",
    "<Flotante>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"Console\"",
    "\"WriteLine\"",
    "\"Write\"",
    "\"ReadLine\"",
    "\"ReadKey\"",
    "\"{\"",
    "\"}\"",
    "\")\"",
    "\"(\"",
    "\";\"",
    "\".\"",
    "\":\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"++\"",
    "\"--\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "<Identificador>",
    "\"//\"",
    "<ComentarioInicio>",
    "\"*/\"",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
  };

}

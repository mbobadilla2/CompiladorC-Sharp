CompiladorC_SharpTokenManager:

package javacc;
/* CompiladorC_SharpTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorC_SharpTokenManager.java */

import java.util.ArrayList;
import javacc.CompiladorC_SharpConstants;
/** Token Manager. */
/*@SuppressWarnings("unused")*/public class CompiladorC_SharpTokenManager implements CompiladorC_SharpConstants {
   static ArrayList<String> lista = CompiladorC_Sharp.lista;
   static ArrayList<String> errores = CompiladorC_Sharp.errores;

/**********************/

CompiladorC_Sharp:

package javacc;
/* CompiladorC_Sharp.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorC_Sharp.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import static javacc.CompiladorC_SharpConstants.*;
import java.util.ArrayList;
import panels.NewTabPanel;
import thangs.BoraFiles;

        public class CompiladorC_Sharp implements CompiladorC_SharpConstants {
                static ArrayList<String> lista = new ArrayList<>();
                static ArrayList<String> errores = new ArrayList<>();
                private int linea = 1;

                public static void Compilar(NewTabPanel ntp) throws ParseException, FileNotFoundException {
                        String analizar = ntp.getCode().getText();
                        String texto = "";
                    
                        try{
                                CompiladorC_Sharp csharp = new CompiladorC_Sharp(new FileInputStream(BoraFiles.TEMP_FILE));
                                csharp.analizadorLexico();
                                for(String i: CompiladorC_SharpTokenManager.lista){
                                    texto += i + "\n";
                                }
                                
                                ntp.getTerminal().setText("");
                                ntp.getTerminal().setText(texto);
                                
                                CompiladorC_SharpTokenManager.lista.clear();
                                
                        } catch(ParseException e){
                                System.out.println(e.getMessage());
//                                String errores = "";
//                                for(String i: CompiladorC_SharpTokenManager.errores){
//                                    errores += i + "\n";
//                                }
                                ntp.getTerminal().setText("");
                                ntp.getTerminal().setText(e.getMessage());
//                                ntp.getTerminal().setText(errores);
                                
                                CompiladorC_Sharp.errores.clear();
                        }
                }
/* Generated By:JavaCC: Do not edit this line. CompiladorC_Sharp.java */
package javacc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import static javacc.CompiladorC_SharpConstants.*;
import java.util.ArrayList;
import listeners.MenuListener;
import panels.NewTabPanel;
import thangs.BoraFiles;

public class CompiladorC_Sharp implements CompiladorC_SharpConstants {
                static ArrayList<String> lexico = new ArrayList();
                static ArrayList<String> semantico = new ArrayList();
                static ArrayList<String> sintactico = new ArrayList();
                public static MenuListener menuListener;
                static String errorSintactico, errorSemantico;
                private static String tokens = "";
                private static String semError = "";

                public static void compilar(NewTabPanel ntp) throws ParseException, FileNotFoundException {

                        lexico.removeAll(lexico);
                        sintactico.removeAll(sintactico);
                        semantico.removeAll(semantico);
                        
                        
                        AnalizadorSemantico.getTabla().clear();
                        CompiladorC_Sharp csharp= new CompiladorC_Sharp(new FileInputStream(BoraFiles.TEMP_FILE));
                        try{
                                csharp.analizadorLexico();
                                
                                //Colocar tokens...
                                tokens = "";
                                for(String tok: lexico){
                                    tokens += tok + "\n";
                                }
                              
                                semError = "No se encontraron errores sintácticos";
                                
                                ntp.getTxtTokens().setText("");
                                ntp.getTxtTokens().setText(tokens);
                                
                                String semantic = "";
                                for (String semanticErrors : semantico) {
                                    if (!semanticErrors.equals("")) {
                                        semantic += semanticErrors + "\n";
                                    }
 
                                }
                                
                                if(semantic.equals("")){
                                    semantic = "No se encontraron errores semánticos";
                                }
                                
                                ntp.getTxtSemanticErrors().setText("");
                                ntp.getTxtSemanticErrors().setText(semantic);
                                
                                //No hay error... :v
                                ntp.getTxtSyntacticErrors().setText("");
                                ntp.getTxtSyntacticErrors().setText(semError);
                                
                                
                                
                                // Se deja de resaltar la palabra de error...
                                menuListener.highlightSemanticErrors("");
                        } catch(ParseException e){
                                
                            Token ultimo = csharp.getToken(0);
                                semError = "Error de sintaxis\n\nEn el token: " + ultimo.image + ". \u005ct \n\nLínea " + ultimo.beginLine + ", columna " + ultimo.beginColumn;
                                sintactico.add(semError);
                                
                                //Colocar tokens...
                                tokens = "";
                                for(String tok: lexico){
                                    tokens += tok + "\n";
                                }
                              
                                ntp.getTxtTokens().setText("");
                                ntp.getTxtTokens().setText(tokens);
                                
                                errorSintactico = "";
                                for (String sintax : sintactico) {
                                    errorSintactico += sintax + "\n";
                                }
                                
                                ntp.getTxtSyntacticErrors().setText("");
                                ntp.getTxtSyntacticErrors().setText(errorSintactico);
                                
                                
                                ntp.getTxtSemanticErrors().setText("");
                                ntp.getTxtSemanticErrors().setText("No se encontraron errores semánticos");
                                
                                menuListener.highlightSemanticErrors(ultimo.image);
                                System.out.println("ERROR: " + ultimo.image);
                         
//                                errorSintactico = "Error: En el token: " + ultimo.image + ". \u005ct En la linea: " + ultimo.beginLine + " y columna: " + ultimo.beginColumn + "\u005cn";
//                                

                        }finally{
                            BoraFiles.writeFile(tokens, BoraFiles.TOKENS);
                            BoraFiles.writeFile(semError, BoraFiles.SEMANTIC_ERROR);
                        }
                }

                public ArrayList<String> getLexico(){
                        return lexico;
                }

                public ArrayList<String> getSintatico(){
                        return sintactico;
                }

                public ArrayList<String> getSemantico(){
                        return semantico;
                }

  final public void cabecera() throws ParseException {
    jj_consume_token(Using);
    jj_consume_token(Identificador);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Punto:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(Punto);
      jj_consume_token(Identificador);
    }
    jj_consume_token(CierreSentencia);
  }

  final public void cuerpoProyecto() throws ParseException {
    jj_consume_token(Namespace);
    jj_consume_token(Identificador);
    jj_consume_token(LlaveIzquierda);
    cuerpoClase();
    jj_consume_token(LlaveDerecha);
  }

  final public void cuerpoClase() throws ParseException {
    jj_consume_token(Clase);
    jj_consume_token(Identificador);
    jj_consume_token(LlaveIzquierda);
    metodoMain();
    jj_consume_token(LlaveDerecha);
  }

  final public void metodoMain() throws ParseException {
    jj_consume_token(Static);
    jj_consume_token(Void);
    jj_consume_token(Main);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(String);
    jj_consume_token(CorcheteIzquierdo);
    jj_consume_token(CorcheteDerecho);
    jj_consume_token(Identificador);
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
  }

  final public void sentencias() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
      case For:
      case Do:
      case While:
      case Switch:
      case Integer:
      case Float:
      case String:
      case Char:
      case Booleano:
      case Console:
      case Identificador:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case For:
        estructuraFor();
        break;
      case If:
        estructuraIf();
        break;
      case While:
        estructuraWhile();
        break;
      case Do:
        estructuraDoWhile();
        break;
      case Switch:
        estructuraSwitch();
        break;
      case Integer:
      case Float:
      case String:
      case Char:
      case Booleano:
      case Identificador:
        declaracionVariable();
        jj_consume_token(CierreSentencia);
        break;
      case Console:
        jj_consume_token(Console);
        jj_consume_token(Punto);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ReadLine:
        case ReadKey:
          lectura();
          break;
        case WriteLine:
        case Write:
          escritura();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(CierreSentencia);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void escritura() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Write:
      jj_consume_token(Write);
      jj_consume_token(ParentesisIzquierdo);
      parametro();
      jj_consume_token(ParentesisDerecho);
      break;
    case WriteLine:
      jj_consume_token(WriteLine);
      jj_consume_token(ParentesisIzquierdo);
      parametro();
      jj_consume_token(ParentesisDerecho);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parametro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Identificador:
      jj_consume_token(Identificador);
      break;
    case Entero:
      jj_consume_token(Entero);
      break;
    case Cadena:
      jj_consume_token(Cadena);
      break;
    case Caracter:
      jj_consume_token(Caracter);
      break;
    case Flotante:
      jj_consume_token(Flotante);
      break;
    case Booleano:
      jj_consume_token(Booleano);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parametros() throws ParseException {
    parametro();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Coma:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(Coma);
      parametro();
    }
  }

  final public void lectura() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ReadKey:
      jj_consume_token(ReadKey);
      jj_consume_token(ParentesisIzquierdo);
      jj_consume_token(ParentesisDerecho);
      break;
    case ReadLine:
      jj_consume_token(ReadLine);
      jj_consume_token(ParentesisIzquierdo);
      jj_consume_token(ParentesisDerecho);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracionVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
    case Identificador:
      declaracionVariableBooleana();
      break;
    case Integer:
      declaracionVariableEntera();
      break;
    case String:
      declaracionVariableCadena();
      break;
    case Char:
      declaracionVariableCaracter();
      break;
    case Float:
      declaracionVariableFlotante();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracionVariableBooleana() throws ParseException {
        int opcion = 0;
        String tokenTipo, identificador1;
        Token  identificador2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
      jj_consume_token(Booleano);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                      tokenTipo = token.image;
    jj_consume_token(Identificador);
                                                               identificador1=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IgualA:
      jj_consume_token(IgualA);
                  opcion = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case True:
        jj_consume_token(True);
        break;
      case False:
        jj_consume_token(False);
        break;
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Nulo:
        jj_consume_token(Nulo);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                           identificador2 = token;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                if (opcion == 0 || (identificador2.kind >= 32 && identificador2.kind <= 34 )) {
                        if (!tokenTipo.equals(";") && !identificador1.equals("")) {
                                errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);

                        }

                }else if (!tokenTipo.equals(";")) {
                                errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                }else{
                        errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
                        semantico.add(errorSemantico);
                        System.out.println(errorSemantico);
                }
  }

  final public void declaracionVariableEntera() throws ParseException {
        int opcion = 0;
        String tokenTipo, identificador1;
        Token identificador2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Integer:
      jj_consume_token(Integer);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
                     tokenTipo = token.image;
    jj_consume_token(Identificador);
                                                              identificador1=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IgualA:
      jj_consume_token(IgualA);
                  opcion = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            identificador2 = token;
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                if (opcion == 0 || identificador2.kind == 28) {
                        if (!tokenTipo.equals(";") && !identificador1.equals("")) {
                                errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);

                        }

                }else if (!tokenTipo.equals(";")) {
                                errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }else{
                                errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }
  }

  final public void declaracionVariableFlotante() throws ParseException {
        int opcion = 0;
        String tokenTipo, identificador1;
        Token identificador2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Float:
      jj_consume_token(Float);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                   tokenTipo = token.image;
    jj_consume_token(Identificador);
                                                            identificador1=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IgualA:
      jj_consume_token(IgualA);
                  opcion = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Flotante:
        jj_consume_token(Flotante);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                        identificador2 = token;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                if (opcion == 0 || identificador2.kind == 28 || identificador2.kind == 31) {
                        if (!tokenTipo.equals(";") && !identificador1.equals("")) {
                                errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);

                        }

                }else if (!tokenTipo.equals(";")) {
                                errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }else{
                                errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }
  }

  final public void declaracionVariableCadena() throws ParseException {
        int opcion = 0;
        String tokenTipo, identificador1;
        Token identificador2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case String:
      jj_consume_token(String);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                    tokenTipo = token.image;
    jj_consume_token(Identificador);
                                                             identificador1=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ReadLine:
    case ReadKey:
    case IgualA:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IgualA:
        jj_consume_token(IgualA);
                  opcion = 1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Identificador:
          jj_consume_token(Identificador);
          break;
        case Cadena:
          jj_consume_token(Cadena);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                           identificador2 = token;
        break;
      case ReadLine:
      case ReadKey:
        lectura();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                if (opcion == 0 || identificador2.kind == 29) {
                        if (!tokenTipo.equals(";") && !identificador1.equals("")) {
                                errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);

                        }

                }else if (!tokenTipo.equals(";")) {
                                errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }else{
                                errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }
  }

  final public void declaracionVariableCaracter() throws ParseException {
        int opcion = 0;
        String tokenTipo, identificador1;
        Token identificador2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Char:
      jj_consume_token(Char);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                  tokenTipo = token.image;
    jj_consume_token(Identificador);
                                                           identificador1=token.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IgualA:
      jj_consume_token(IgualA);
                  opcion = 1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Caracter:
        jj_consume_token(Caracter);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                             identificador2 = token;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                if (opcion == 0 || identificador2.kind == 30) {
                        if (!tokenTipo.equals(";") && !identificador1.equals("")) {
                                errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);

                        }

                }else if (!tokenTipo.equals(";")) {
                                errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }else{
                                errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
                                semantico.add(errorSemantico);
                                System.out.println(errorSemantico);
                        }
  }

  final public void operacion() throws ParseException {
    operadoresAritmeticos();
    parametros();
  }

  final public void operadoresAritmeticos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Suma:
      jj_consume_token(Suma);
      break;
    case Resta:
      jj_consume_token(Resta);
      break;
    case Multiplicacion:
      jj_consume_token(Multiplicacion);
      break;
    case Division:
      jj_consume_token(Division);
      break;
    case Modulo:
      jj_consume_token(Modulo);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void estructuraSwitch() throws ParseException {
    jj_consume_token(Switch);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    casos();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Default:
      predeterminado();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDerecha);
  }

  final public void casos() throws ParseException {
    label_4:
    while (true) {
      jj_consume_token(Case);
      parametros();
      jj_consume_token(DosPuntos);
      sentencias();
      jj_consume_token(Break);
      jj_consume_token(CierreSentencia);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Case:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_4;
      }
    }
  }

  final public void predeterminado() throws ParseException {
    jj_consume_token(Default);
    jj_consume_token(DosPuntos);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Break:
      jj_consume_token(Break);
      jj_consume_token(CierreSentencia);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
  }

  final public void estructuraIf() throws ParseException {
    jj_consume_token(If);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    condiciones();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case And:
    case Or:
      condicionesAdicionales();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Else:
      estructuraElse();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDerecha);
  }

  final public void estructuraElse() throws ParseException {
    jj_consume_token(Else);
    sentencias();
  }

  final public void condicionesAdicionales() throws ParseException {
    label_5:
    while (true) {
      tokensOperadoresLogicos();
      jj_consume_token(Identificador);
      condiciones();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case And:
      case Or:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_5;
      }
    }
  }

  final public void tokensOperadoresLogicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case And:
      jj_consume_token(And);
      break;
    case Or:
      jj_consume_token(Or);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condiciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
    case Entero:
    case Cadena:
    case Caracter:
    case Flotante:
    case True:
    case False:
    case Identificador:
      condicionBooleana();
      break;
    case IgualQue:
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:
    case DiferenteQue:
      condicionAritmetica();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condicionBooleana() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
    case Entero:
    case Cadena:
    case Caracter:
    case Flotante:
    case Identificador:
      parametro();
      signosComparacion();
      parametro();
      break;
    case True:
    case False:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case True:
        jj_consume_token(True);
        break;
      case False:
        jj_consume_token(False);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condicionAritmetica() throws ParseException {
    signosComparacion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Identificador:
      jj_consume_token(Identificador);
      break;
    case Entero:
      jj_consume_token(Entero);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void estructuraWhile() throws ParseException {
    jj_consume_token(While);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
    case Entero:
    case Cadena:
    case Caracter:
    case Flotante:
    case True:
    case False:
    case Identificador:
      condicionBooleana();
      break;
    case IgualQue:
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:
    case DiferenteQue:
      condicionAritmetica();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case And:
    case Or:
      condicionesAdicionales();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
  }

  final public void estructuraDoWhile() throws ParseException {
    jj_consume_token(Do);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
    jj_consume_token(While);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Booleano:
    case Entero:
    case Cadena:
    case Caracter:
    case Flotante:
    case True:
    case False:
    case Identificador:
      condicionBooleana();
      break;
    case IgualQue:
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:
    case DiferenteQue:
      condicionAritmetica();
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case And:
    case Or:
      condicionesAdicionales();
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
  }

  final public void estructuraFor() throws ParseException {
    jj_consume_token(For);
    jj_consume_token(ParentesisIzquierdo);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Integer:
    case Float:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Integer:
        jj_consume_token(Integer);
        break;
      case Float:
        jj_consume_token(Float);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(Identificador);
    jj_consume_token(IgualA);
    jj_consume_token(Entero);
    jj_consume_token(CierreSentencia);
    jj_consume_token(Identificador);
    signosComparacion();
    jj_consume_token(Entero);
    jj_consume_token(CierreSentencia);
    jj_consume_token(Identificador);
    asignacionesFor();
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
  }

  final public void signosComparacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IgualQue:
      jj_consume_token(IgualQue);
      break;
    case DiferenteQue:
      jj_consume_token(DiferenteQue);
      break;
    case MenorQue:
      jj_consume_token(MenorQue);
      break;
    case MenorIgualQue:
      jj_consume_token(MenorIgualQue);
      break;
    case MayorQue:
      jj_consume_token(MayorQue);
      break;
    case MayorIgualQue:
      jj_consume_token(MayorIgualQue);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacionesFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SumaIgualA:
    case RestaIgualA:
    case MultiplicacionIgualA:
    case DivisionIgualA:
    case ModuloIgualA:
      asignacionVariablesFor();
      break;
    case Incremento:
      jj_consume_token(Incremento);
      break;
    case Decremento:
      jj_consume_token(Decremento);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacionVariablesFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SumaIgualA:
      jj_consume_token(SumaIgualA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RestaIgualA:
      jj_consume_token(RestaIgualA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case MultiplicacionIgualA:
      jj_consume_token(MultiplicacionIgualA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DivisionIgualA:
      jj_consume_token(DivisionIgualA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ModuloIgualA:
      jj_consume_token(ModuloIgualA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Identificador:
        jj_consume_token(Identificador);
        break;
      case Entero:
        jj_consume_token(Entero);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void analizadorLexico() throws ParseException {
    label_6:
    while (true) {
      cabecera();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Using:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_6;
      }
    }
    cuerpoProyecto();
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public CompiladorC_SharpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xf81e800,0x0,0xf81e800,0x0,0xf8000000,0x0,0x0,0xf800000,0x8000000,0x0,0x0,0x800000,0x10000000,0x0,0x1000000,0x90000000,0x0,0x2000000,0x20000000,0x0,0x0,0x4000000,0x40000000,0x0,0x0,0x80000,0x20000,0x40000,0x0,0x1000,0x0,0x0,0xf8000000,0x0,0xf8000000,0x10000000,0xf8000000,0x0,0xf8000000,0x0,0x1800000,0x1800000,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,0x4,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000,0x8,0xf0,0x8,0x30,0x0,0x8000,0xc0,0x0,0x0,0x7,0x800000,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,0x0,0x8000c0,0x8000c0,0x0,0x0,0x800000,0x7c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000003,0x3,0x3,0x0,0x80000003,0x0,0x80000003,0x0,0x0,0x0,0x80000000,0x7f000000,0x0,0x0,0x0,0x0,0x0,0x1f000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x0,0x80,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x60,0x60,0x9f,0x0,0x80,0x80,0x9f,0x60,0x9f,0x60,0x0,0x0,0x1f,0x0,0x80,0x80,0x80,0x80,0x80,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CompiladorC_Sharp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorC_Sharp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorC_SharpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorC_Sharp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorC_SharpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorC_Sharp(CompiladorC_SharpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorC_SharpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }

package javacc;

/* CompiladorC_Sharp.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorC_Sharp.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import static javacc.CompiladorC_SharpConstants.*;
import java.util.ArrayList;
import panels.NewTabPanel;
import thangs.BoraFiles;

        public class CompiladorC_Sharp implements CompiladorC_SharpConstants {
                static ArrayList<String> lista = new ArrayList<>();
                static ArrayList<String> errores = new ArrayList<>();
                private int linea = 1;

                public static void Compilar(NewTabPanel ntp) throws ParseException, FileNotFoundException {
                        String analizar = ntp.getCode().getText();
                        String texto = "";
                    
                        try{
                                CompiladorC_Sharp csharp = new CompiladorC_Sharp(new FileInputStream(BoraFiles.TEMP_FILE));
                                csharp.analizadorLexico();
                                for(String i: CompiladorC_SharpTokenManager.lista){
                                    texto += i + "\n";
                                }
                                
                                ntp.getTerminal().setText("");
                                ntp.getTerminal().setText(texto);
                                
                                CompiladorC_SharpTokenManager.lista.clear();
                                
                        } catch(ParseException e){
                                System.out.println(e.getMessage());
                                String errores = "";
                                //for(String i: CompiladorC_SharpTokenManager.errores){
////                                    errores += CompiladorC_SharpTokenManager.errores.get(i) + "\n";
////                                    break;
//                                }
                                ntp.getTerminal().setText("");
                                ntp.getTerminal().setText(e.getMessage());
//                                ntp.getTerminal().setText(errores);
                                
                                CompiladorC_Sharp.errores.clear();
                        }
                }

                public ArrayList<String> getLista(){
                        return lista;
                }

                public ArrayList<String> getErrores(){
                        return errores;
                }

  final public void cabecera() throws ParseException {
    try {
      jj_consume_token(Using);
    } catch (ParseException e) {
errores.add("No se encontr\u00f3 la clausula \u005c"using\u005c" en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Identificador);
    } catch (ParseException e) {
errores.add("Error, se esperaba el nombre de una clase en la l\u00ednea " + linea);
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Punto:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
        jj_consume_token(Punto);
        try {
          jj_consume_token(Identificador);
        } catch (ParseException e) {
errores.add("Error, se esperaba el nombre de una clase en la l\u00ednea " + linea);
        }
      } catch (ParseException e) {
errores.add("Error, se esperaba un punto (.) en la l\u00ednea " + linea);
      }
    }
    try {
      jj_consume_token(CierreSentencia);
    } catch (ParseException e) {
errores.add("Error, se esperaba un punto y coma (;) en la l\u00ednea " + linea);
    }
  }

  final public void cuerpoProyecto() throws ParseException {
    try {
      jj_consume_token(Namespace);
    } catch (ParseException e) {
errores.add("Error, no se encontr\u00f3 la clausula namespace en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Identificador);
    } catch (ParseException e) {
errores.add("Error, no se encontr\u00f3 un identificador para el namespace en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(LlaveIzquierda);
    } catch (ParseException e) {
errores.add("Error, falta una llave de apertura ({) en la l\u00ednea " + linea);
    }
    cuerpoClase();
    try {
      jj_consume_token(LlaveDerecha);
    } catch (ParseException e) {
errores.add("Error, falta una llave de cierre (}) en la l\u00ednea " + linea);
    }
  }

  final public void cuerpoClase() throws ParseException {
    try {
      jj_consume_token(Clase);
    } catch (ParseException e) {
errores.add("Error, no se encuentra la clausula class en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Identificador);
    } catch (ParseException e) {
errores.add("Error, no existe un identificador para la clase en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(LlaveIzquierda);
    } catch (ParseException e) {
errores.add("Error, falta una llave de apertura ({) en la l\u00ednea " + linea);
    }
    metodoMain();
    try {
      jj_consume_token(LlaveDerecha);
    } catch (ParseException e) {
errores.add("Error, falta una llave de cierre (}) en la l\u00ednea " + linea);
    }
  }

  final public void metodoMain() throws ParseException {
    try {
      jj_consume_token(Static);
    } catch (ParseException e) {
errores.add("Error, es necesaria la clausula \u005c"static\u005c" para el m\u00e9todo Main en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Void);
    } catch (ParseException e) {
errores.add("Error, es necesaria la clausula \u005c"void\u005c" para el m\u00e9todo Main en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Main);
    } catch (ParseException e) {
errores.add("Error, es necesaria la clausula \u005c"Main\u005c" para el m\u00e9todo Main en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(ParentesisIzquierdo);
    } catch (ParseException e) {
errores.add("Error, falta un Parentesis de apertura en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(String);
      try {
        jj_consume_token(CorcheteIzquierdo);
        try {
          jj_consume_token(CorcheteDerecho);
        } catch (ParseException e) {
errores.add("Error, falta un Corchete de cierre en la l\u00ednea " + linea);
        }
      } catch (ParseException e) {
errores.add("Error, falta un Corchete de apertura en la l\u00ednea " + linea);
      }
    } catch (ParseException e) {
errores.add("Error, es necesaria declarar un arreglo de String en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(Identificador);
    } catch (ParseException e) {
errores.add("Error, es necesario un identificador en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(ParentesisDerecho);
    } catch (ParseException e) {
errores.add("Error, falta un Parentesis de cierre en la l\u00ednea " + linea);
    }
    try {
      jj_consume_token(LlaveIzquierda);
    } catch (ParseException e) {
errores.add("Error, falta una llave de apertura en la l\u00ednea " + linea);
    }
    sentencias();
    try {
      jj_consume_token(LlaveDerecha);
    } catch (ParseException e) {
errores.add("Error, falta una llave de cierre en la l\u00ednea " + linea);
    }
  }

  final public void sentencias() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case If:
      case For:
      case Do:
      case While:
      case Switch:
      case Integer:
      case Float:
      case String:
      case Char:
      case Booleano:
      case Console:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case For:{
        estructuraFor();
        break;
        }
      case If:{
        estructuraIf();
        break;
        }
      case While:{
        estructuraWhile();
        break;
        }
      case Do:{
        estructuraDoWhile();
        break;
        }
      case Switch:{
        estructuraSwitch();
        break;
        }
      case Integer:
      case Float:
      case String:
      case Char:
      case Booleano:{
        declaracionVariable();
        try {
          jj_consume_token(CierreSentencia);
        } catch (ParseException e) {
errores.add("Error, falta un punto y coma (;) para cerrar la sentencia en la l\u00ednea " + linea);
        }
        break;
        }
      case Console:{
        try {
          jj_consume_token(Console);
        } catch (ParseException e) {
errores.add("Error, falta la clase Console para usar sus metodos en la l\u00ednea " + linea);
        }
        try {
          jj_consume_token(Punto);
        } catch (ParseException e) {
errores.add("Error, es necesario un punto (.) en la l\u00ednea " + linea);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ReadLine:
        case ReadKey:{
          lectura();
          break;
          }
        case WriteLine:
        case Write:{
          escritura();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        try {
          jj_consume_token(CierreSentencia);
        } catch (ParseException e) {
errores.add("Error, falta un punto y coma (;) para cerrar la sentencia en la l\u00ednea " + linea);
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void escritura() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Write:{
      jj_consume_token(Write);
      jj_consume_token(ParentesisIzquierdo);
      parametro();
      jj_consume_token(ParentesisDerecho);
      break;
      }
    case WriteLine:{
      jj_consume_token(WriteLine);
      jj_consume_token(ParentesisIzquierdo);
      parametro();
      jj_consume_token(ParentesisDerecho);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parametro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Identificador:{
      jj_consume_token(Identificador);
      break;
      }
    case Entero:{
      jj_consume_token(Entero);
      break;
      }
    case Cadena:{
      jj_consume_token(Cadena);
      break;
      }
    case Caracter:{
      jj_consume_token(Caracter);
      break;
      }
    case Flotante:{
      jj_consume_token(Flotante);
      break;
      }
    case Booleano:{
      jj_consume_token(Booleano);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parametros() throws ParseException {
    parametro();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Coma:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(Coma);
      parametro();
    }
  }

  final public void lectura() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ReadKey:{
      jj_consume_token(ReadKey);
      jj_consume_token(ParentesisIzquierdo);
      jj_consume_token(ParentesisDerecho);
      break;
      }
    case ReadLine:{
      jj_consume_token(ReadLine);
      jj_consume_token(ParentesisIzquierdo);
      jj_consume_token(ParentesisDerecho);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracionVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Booleano:{
      declaracionVariableBooleana();
      break;
      }
    case Integer:{
      declaracionVariableEntera();
      break;
      }
    case String:{
      declaracionVariableCadena();
      break;
      }
    case Char:{
      declaracionVariableCaracter();
      break;
      }
    case Float:{
      declaracionVariableFlotante();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void declaracionVariableBooleana() throws ParseException {
    jj_consume_token(Booleano);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualA:{
      jj_consume_token(IgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case True:{
        jj_consume_token(True);
        break;
        }
      case False:{
        jj_consume_token(False);
        break;
        }
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Nulo:{
        jj_consume_token(Nulo);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void declaracionVariableEntera() throws ParseException {
    jj_consume_token(Integer);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualA:{
      jj_consume_token(IgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      case Suma:
      case Resta:
      case Multiplicacion:
      case Division:
      case Modulo:{
        operacion();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void declaracionVariableFlotante() throws ParseException {
    jj_consume_token(Float);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualA:{
      jj_consume_token(IgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Flotante:{
        jj_consume_token(Flotante);
        break;
        }
      case Suma:
      case Resta:
      case Multiplicacion:
      case Division:
      case Modulo:{
        operacion();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void declaracionVariableCadena() throws ParseException {
    jj_consume_token(String);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualA:{
      jj_consume_token(IgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Cadena:{
        jj_consume_token(Cadena);
        break;
        }
      case ReadLine:
      case ReadKey:{
        lectura();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void declaracionVariableCaracter() throws ParseException {
    jj_consume_token(Char);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualA:{
      jj_consume_token(IgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Caracter:{
        jj_consume_token(Caracter);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void operacion() throws ParseException {
    operadoresAritmeticos();
    label_4:
    while (true) {
      parametros();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Booleano:
      case Entero:
      case Cadena:
      case Caracter:
      case Flotante:
      case Identificador:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_4;
      }
    }
  }

  final public void operadoresAritmeticos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Suma:{
      jj_consume_token(Suma);
      break;
      }
    case Resta:{
      jj_consume_token(Resta);
      break;
      }
    case Multiplicacion:{
      jj_consume_token(Multiplicacion);
      break;
      }
    case Division:{
      jj_consume_token(Division);
      break;
      }
    case Modulo:{
      jj_consume_token(Modulo);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void estructuraSwitch() throws ParseException {
    jj_consume_token(Switch);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    casos();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Default:{
      predeterminado();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDerecha);
  }

  final public void casos() throws ParseException {
    label_5:
    while (true) {
      jj_consume_token(Case);
      parametros();
      jj_consume_token(DosPuntos);
      sentencias();
      jj_consume_token(Break);
      jj_consume_token(CierreSentencia);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Case:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
    }
  }

  final public void predeterminado() throws ParseException {
    jj_consume_token(Default);
    jj_consume_token(DosPuntos);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Break:{
      jj_consume_token(Break);
      jj_consume_token(CierreSentencia);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void estructuraIf() throws ParseException {
    jj_consume_token(If);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    condiciones();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case And:
    case Or:{
      condicionesAdicionales();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Else:{
      estructuraElse();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(LlaveDerecha);
  }

  final public void estructuraElse() throws ParseException {
    jj_consume_token(Else);
    sentencias();
  }

  final public void condicionesAdicionales() throws ParseException {
    label_6:
    while (true) {
      tokensOperadoresLogicos();
      jj_consume_token(Identificador);
      condiciones();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case And:
      case Or:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
    }
  }

  final public void tokensOperadoresLogicos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case And:{
      jj_consume_token(And);
      break;
      }
    case Or:{
      jj_consume_token(Or);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condiciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualQue:
    case DiferenteQue:{
      condicionBooleana();
      break;
      }
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:{
      condicionAritmetica();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condicionBooleana() throws ParseException {
    diferenteIgual();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case True:{
      jj_consume_token(True);
      break;
      }
    case False:{
      jj_consume_token(False);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condicionAritmetica() throws ParseException {
    comparacionesIf();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Identificador:{
      jj_consume_token(Identificador);
      break;
      }
    case Entero:{
      jj_consume_token(Entero);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comparacionesIf() throws ParseException {
    comparacionesFor();
  }

  final public void diferenteIgual() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualQue:{
      jj_consume_token(IgualQue);
      break;
      }
    case DiferenteQue:{
      jj_consume_token(DiferenteQue);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void estructuraWhile() throws ParseException {
    jj_consume_token(While);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualQue:
    case DiferenteQue:{
      condicionBooleana();
      break;
      }
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:{
      condicionAritmetica();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case And:
    case Or:{
      condicionesAdicionales();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
  }

  final public void estructuraDoWhile() throws ParseException {
    jj_consume_token(Do);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
    jj_consume_token(While);
    jj_consume_token(ParentesisIzquierdo);
    jj_consume_token(Identificador);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IgualQue:
    case DiferenteQue:{
      condicionBooleana();
      break;
      }
    case MenorQue:
    case MayorQue:
    case MenorIgualQue:
    case MayorIgualQue:{
      condicionAritmetica();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case And:
    case Or:{
      condicionesAdicionales();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(ParentesisDerecho);
  }

  final public void estructuraFor() throws ParseException {
    jj_consume_token(For);
    jj_consume_token(ParentesisIzquierdo);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Integer:
    case Float:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Integer:{
        jj_consume_token(Integer);
        break;
        }
      case Float:{
        jj_consume_token(Float);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(Identificador);
    jj_consume_token(IgualA);
    jj_consume_token(Entero);
    jj_consume_token(CierreSentencia);
    jj_consume_token(Identificador);
    comparacionesFor();
    jj_consume_token(Entero);
    jj_consume_token(CierreSentencia);
    jj_consume_token(Identificador);
    asignacionesFor();
    jj_consume_token(ParentesisDerecho);
    jj_consume_token(LlaveIzquierda);
    sentencias();
    jj_consume_token(LlaveDerecha);
  }

  final public void comparacionesFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MenorQue:{
      jj_consume_token(MenorQue);
      break;
      }
    case MenorIgualQue:{
      jj_consume_token(MenorIgualQue);
      break;
      }
    case MayorQue:{
      jj_consume_token(MayorQue);
      break;
      }
    case MayorIgualQue:{
      jj_consume_token(MayorIgualQue);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacionesFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SumaIgualA:
    case RestaIgualA:
    case MultiplicacionIgualA:
    case DivisionIgualA:
    case ModuloIgualA:{
      asignacionVariablesFor();
      break;
      }
    case Incremento:{
      jj_consume_token(Incremento);
      break;
      }
    case Decremento:{
      jj_consume_token(Decremento);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void asignacionVariablesFor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SumaIgualA:{
      jj_consume_token(SumaIgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case RestaIgualA:{
      jj_consume_token(RestaIgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case MultiplicacionIgualA:{
      jj_consume_token(MultiplicacionIgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case DivisionIgualA:{
      jj_consume_token(DivisionIgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ModuloIgualA:{
      jj_consume_token(ModuloIgualA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        jj_consume_token(Identificador);
        break;
        }
      case Entero:{
        jj_consume_token(Entero);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void analizadorLexico() throws ParseException {
    cabecera();
    cuerpoProyecto();
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public CompiladorC_SharpTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xf81e800,0x0,0xf81e800,0x0,0xf8000000,0x0,0x0,0xf800000,0x0,0x0,0x10000000,0x0,0x80000000,0x0,0x20000000,0x0,0x40000000,0x0,0xf8000000,0x0,0x80000,0x20000,0x40000,0x0,0x1000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x10000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000,0x8,0xf0,0x8,0x30,0x0,0x8000,0xc0,0x0,0x7,0x800000,0x7c0000,0x800000,0x7c0000,0x800000,0xc0,0x800000,0x0,0x800000,0x0,0x7c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x3,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x7f000000,0x0,0x0,0x0,0x0,0x0,0x1f000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x60,0x0,0x60,0x60,0x1f,0x0,0x80,0x10,0x1f,0x60,0x1f,0x60,0x0,0x0,0xf,0x0,0x80,0x80,0x80,0x80,0x80,0x0,};
   }

  /** Constructor with InputStream. */
  public CompiladorC_Sharp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorC_Sharp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorC_SharpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorC_Sharp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorC_SharpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorC_Sharp(CompiladorC_SharpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorC_SharpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[79];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }

options{
	STATIC = false;
}
PARSER_BEGIN(CompiladorC_Sharp)
import java.util.ArrayList;
	public class CompiladorC_Sharp{
		static ArrayList<String> lexico = new ArrayList();
		static ArrayList<String> semantico = new ArrayList();
		static ArrayList<String> sintactico = new ArrayList();
		static String errorSintactico, errorSemantico;

		public static void main(String[] args) throws ParseException {

			CompiladorC_Sharp csharp= new CompiladorC_Sharp(System.in);
			try{
				csharp.analizadorLexico();
				errorSintactico = "No se ha presentado ning√∫n error.";
				sintactico.add(errorSintactico);
			} catch(ParseException e){
				Token ultimo = csharp.getToken(0);
				errorSintactico += "Error: En el token: " + ultimo.image + ". \t En la linea: " + ultimo.beginLine + " y columna: " + ultimo.beginColumn + "\n";
				sintactico.add(errorSintactico);
		
			}
		}

		public ArrayList<String> getLexico(){
			return lexico;
		}

		public ArrayList<String> getSintatico(){
			return sintactico;
		}

		public ArrayList<String> getSemantico(){
			return semantico;
		}
	}
PARSER_END(CompiladorC_Sharp)

//Tokens

//Tokens principales


//Tokens palabras de acceso/reservadas
TOKEN : {
	<Namespace : "namespace"> {										//1
		lexico.add("Palabra reservada -> " + image);
	}
	|<Using : "using"> {											//2
		lexico.add("Importacion de libreria -> " + image);
	}
	|<Clase : "class"> {											//3
		lexico.add("Declaracion de clase -> " + image);
	}
	|<Privado : "private"> {										//4
		lexico.add("Acceso Privado -> " + image);
	}
	|<Publico : "public"> {											//5
		lexico.add("Acceso Publico -> " + image);
	}
	|<Protegido : "protected"> {									//6
		lexico.add("Acceso Protegido -> " + image);
	}
	|<Funcion : "funcion"> {										//7
		lexico.add("Palabra reservada -> " + image);
	}
	|<Main : "Main"> {												//8
		lexico.add("Nombre funcion principal -> " + image);
	}
	|<Retorno : "return"> {											//9
		lexico.add("Pablabra reservada -> " + image);
	}
	|<Goto : "goto"> {												//10
		lexico.add("Pablabra reservada -> " + image);
	}
	|<If : "if"> {													//11
		lexico.add("Condicional -> " + image);
	}
	|<Else : "else"> {												//12
		lexico.add("Condicional -> " + image);
	}
	|<For : "for"> {												//13
		lexico.add("Ciclo -> " + image);
	}
	|<Do : "do"> {													//14
		lexico.add("Ciclo -> " + image);
	}
	|<While : "while"> {											//15
		lexico.add("Ciclo -> " + image);
	}
	|<Switch : "switch"> {											//16
		lexico.add("Condicional -> " + image);
	}
	|<Case : "case"> {												//17
		lexico.add("Palabra reservada -> " + image);
	}
	|<Break : "break"> {											//18
		lexico.add("Palabra reservada -> " + image);
	}
	|<Default : "default"> {										//19
		lexico.add("Palabra reservada -> " + image);
	}
	|<Continue : "continue"> {										//20
		lexico.add("Palabra reservada -> " + image);
	}
	|<Void : "void"> {												//21
		lexico.add("Palabra reservada -> " + image);
	}
	|<Static : "static"> {											//22
		lexico.add("Palabra reservada -> " + image);
	}
	
}

//Palabras reservadas para datos
TOKEN : {
	<Integer: "int"> {												//23
		lexico.add("Tipo de variable -> " + image + "(Entero)");
	}
	|<Float: "float"> {												//24
		lexico.add("Tipo de variable -> " + image + "(Flotante)");
	}
	|<String: "string"> {											//25
		lexico.add("Tipo de variable -> " + image + "(Cadena)");
	}
	|<Char: "char"> {												//26
		lexico.add("Tipo de variable -> " + image + "(Caracter)");
	}
	|<Booleano: "bool"> {											//27
		lexico.add("Tipo de variable -> " + image + "(Caracter)");
	}

}

//Tipo de datos
TOKEN : {
	<Entero : ("-")?(["0"-"9"])+> {										//28
		lexico.add("Tipo de dato entero -> " + image);
	}
	|<Cadena : (["\""](["a"-"z","A"-"Z","0"-"9"," ","!"-"?"])*["\""])> {//29
		lexico.add("Tipo de dato String -> " + image);
	}
	|<Caracter : (["'"]["a"-"z","A"-"Z","0"-"9"," "]["'"])> {		//30
		lexico.add("Tipo de dato caracter -> " + image);
	}
	|<Flotante : ("-")?((["0"-"9"])+["."](["0"-"9"])+)+> {				//31
		lexico.add("Tipo de dato flotante -> " + image);
	}
	|<True : "true"> {												//32
		lexico.add("Tipo de dato Booleano -> " + image);
	}
	|<False : "false"> {											//33
		lexico.add("Tipo de dato Booleano -> " + image);
	}
	|<Nulo : "null"> {												//34
		lexico.add("Tipo de dato nulo -> " + image);
	}
}

//Token metodos cools basics

TOKEN : {
	<Console : "Console"> {											//35
		lexico.add("Refencia a clase -> " + image);
	}
	|<WriteLine : "WriteLine"> {									//36
		lexico.add("Metodo de escritura -> " + image);
	}
	|<Write : "Write"> {											//37
		lexico.add("Metodo de escritura -> " + image);
	}
	|<ReadLine : "ReadLine"> {										//38
		lexico.add("Metodo de lectura -> " + image);
	}
	|<ReadKey : "ReadKey"> {										//39
		lexico.add("Metodo de lectura -> " + image);
	}
}

//Tokens de puntuacion

TOKEN : {
	<LlaveIzquierda : "{"> {										//40
		lexico.add("Llave Izquierda -> " + image);
	}
	|<LlaveDerecha : "}"> {											//41
		lexico.add("Llave Derecha -> " + image);
	}
	|<ParentesisDerecho : ")"> {									//42
		lexico.add("Parentesis -> " + image);
	}
	|<ParentesisIzquierdo : "(" > {									//43
		lexico.add("Parentesis -> " + image);
	}
	|<CierreSentencia : ";"> {										//44
		lexico.add("Cierre de sentencia -> " + image);
	}
	|<Punto : "."> {												//45
		lexico.add("Punto -> " + image);
	}
	|<DosPuntos : ":"> {											//46
		lexico.add("Dos puntos -> " + image);
	}
	|<Coma : ","> {													//47
		lexico.add("Coma -> " + image);
	}
	|<CorcheteIzquierdo : "["> {									//48
		lexico.add("CorcheteIzquierdo -> " + image);
	}
	|<CorcheteDerecho : "]"> {										//49
		lexico.add("CorcheteDerecho -> " + image);
	}
}

//Tokens para operaciones aritmeticas
TOKEN : {
	<Suma : "+"> {													//50
		lexico.add("Operador aritmetico suma -> " + image);
	}
	|<Resta : "-"> {												//51
		lexico.add("Operador aritmetico -> resta " + image);
	}
	|<Multiplicacion : "*"> {										//52
		lexico.add("Operador aritmetico multiplicacion -> " + image);
	}
	|<Division : "/"> {												//53
		lexico.add("Operador aritmetico division -> " + image);
	}
	|<Modulo : "%"> {												//54
		lexico.add("Operador aritmetico modulo -> " + image);
	}
}

//Toneks para asignaciones
TOKEN : {
	<IgualA : "="> {												//55
		lexico.add("Asignacion -> " + image);
	}
	|<SumaIgualA : "+="> {											//56
		lexico.add("Asignacion -> " + image);
	}
	|<RestaIgualA : "-="> {											//57
		lexico.add("Asignacion -> " + image);
	}
	|<MultiplicacionIgualA : "*="> {								//58
		lexico.add("Asignacion -> " + image);
	}
	|<DivisionIgualA : "/="> {										//59
		lexico.add("Asignacion -> " + image);
	}
	|<ModuloIgualA : "%="> {										//60
		lexico.add("Asignacion -> " + image);
	}
	|<Incremento : "++"> {											//61
		lexico.add("Asignacion -> " + image);
	}
	|<Decremento : "--"> {											//62
		lexico.add("Asignacion -> " + image);
	}
}

//Tokens operadores relacionales
TOKEN : {
	<IgualQue : "=="> {												//63
		lexico.add("Operador Relacional -> " + image);
	}
	|<MenorQue : "<"> {												//64
		lexico.add("Operador Relacional -> " + image);
	}
	|<MayorQue : ">"> {												//65
		lexico.add("Operador Relacional -> " + image);
	}
	|<MenorIgualQue : "<="> {										//66
		lexico.add("Operador Relacional -> " + image);
	}
	|<MayorIgualQue : ">="> {										//67
		lexico.add("Operador Relacional -> " + image);
	}
	|<DiferenteQue : "!="> {										//68
		lexico.add("Operador Relacional -> " + image);
	}
}

//Tokens operadores logicos
TOKEN : {
	<And : "&&"> {													//69
		lexico.add("Operador Logico -> " + image);
	}
	|<Or : "||"> {													//70
		lexico.add("Operador Logico -> " + image);
	}
}

//Token para identificadores
TOKEN : {
	<Identificador : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_"])*> {		//71
		lexico.add("Identificador -> " + image);
	}
}

//Token comentarios
TOKEN : {
	<ComentarioLinea : "//" > {										//72
		lexico.add("Comentario de una linea -> " + image);
	}
	|<ComentarioInicio : ("/*" | "/**") > {							//73
		lexico.add("Comentario de parrafo inicio -> " + image);
	}
	|<ComentarioTermino : "*/" > {									//74
		lexico.add("Comentario de parrafo termino -> " + image);
	}
}

SKIP : {
	" "
	|"\r"
	|"\t"
	|"\n"
}


void cabecera() : {} {
	
	<Using><Identificador>(<Punto><Identificador>)*<CierreSentencia>
		
}

void cuerpoProyecto() : {} {

		<Namespace><Identificador><LlaveIzquierda>cuerpoClase()<LlaveDerecha>
	
}

void cuerpoClase() : {} {

		<Clase><Identificador><LlaveIzquierda>metodoMain()<LlaveDerecha>
}

void metodoMain() : {} {

		<Static><Void><Main><ParentesisIzquierdo><String><CorcheteIzquierdo><CorcheteDerecho><Identificador><ParentesisDerecho><LlaveIzquierda>sentencias()<LlaveDerecha>

}

void sentencias() : {} {

	(estructuraFor()
	|estructuraIf()
	|estructuraWhile()
	|estructuraDoWhile()
	|estructuraSwitch()
	|declaracionVariable()<CierreSentencia>
	|<Console><Punto>(lectura() | escritura())<CierreSentencia>)*
}


void escritura() : {} {

	<Write><ParentesisIzquierdo>parametro()<ParentesisDerecho>
	|<WriteLine><ParentesisIzquierdo>parametro()<ParentesisDerecho>
		
}

void parametro() : {} {

		<Identificador>
		|<Entero>
		|<Cadena>
		|<Caracter>
		|<Flotante>
		|<Booleano>

}

void parametros() : {} {
	
	parametro()(<Coma>parametro())*
}

void lectura() : {} {

	<ReadKey><ParentesisIzquierdo><ParentesisDerecho>
	|<ReadLine><ParentesisIzquierdo><ParentesisDerecho>
	
}

void declaracionVariable() : {} {
	declaracionVariableBooleana()
	|declaracionVariableEntera()
	|declaracionVariableCadena()
	|declaracionVariableCaracter()
	|declaracionVariableFlotante()
	
}

void declaracionVariableBooleana() : {
	int opcion = 0;
	String tokenTipo, identificador1;
	Token  identificador2 = null;
} {
	(<Booleano>)?{tokenTipo = token.image;}<Identificador>{identificador1=token.image;}		
	(<IgualA>{opcion = 1;}(<True> | <False> | <Identificador>| <Nulo>){identificador2 = token;})?
	{

		if (opcion == 0 || (identificador2.kind >= 32 && identificador2.kind <= 34 )) {
			if (!tokenTipo.equals(";") && !identificador1.equals("")) {
				errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
			
			}
			
		}else if (!tokenTipo.equals(";")) {
				errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);	
		}else{
			errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
			semantico.add(errorSemantico);
			System.out.println(errorSemantico);
		}
		
	}


}

void declaracionVariableEntera() : {
	int opcion = 0;
	String tokenTipo, identificador1;
	Token identificador2 = null;
} {
	(<Integer>)?{tokenTipo = token.image;}<Identificador>{identificador1=token.image;}
	(<IgualA>{opcion = 1;}(<Identificador> | <Entero> ){identificador2 = token;} )?
	{
		if (opcion == 0 || identificador2.kind == 28) {
			if (!tokenTipo.equals(";") && !identificador1.equals("")) {
				errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
				
			}
			
		}else if (!tokenTipo.equals(";")) {
				errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);	
			}else{
				errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
			}
		
	}

	
}

void declaracionVariableFlotante() : {
	int opcion = 0;
	String tokenTipo, identificador1;
	Token identificador2 = null;
} {
	(<Float>)?{tokenTipo = token.image;}<Identificador>{identificador1=token.image;}
	(<IgualA>{opcion = 1;}(<Identificador> | <Flotante> | <Entero>){identificador2 = token;})?
	{
		if (opcion == 0 || identificador2.kind == 28 || identificador2.kind == 31) {
			if (!tokenTipo.equals(";") && !identificador1.equals("")) {
				errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
				
			}
			
		}else if (!tokenTipo.equals(";")) {
				errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);	
			}else{
				errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
			}
		
	}
	
}

void declaracionVariableCadena() : {
	int opcion = 0;
	String tokenTipo, identificador1;
	Token identificador2 = null;
} {
	(<String>)?{tokenTipo = token.image;}<Identificador>{identificador1=token.image;}
	(<IgualA>{opcion = 1;}(<Identificador> | <Cadena>){identificador2 = token;} | lectura())?

	{
		if (opcion == 0 || identificador2.kind == 29) {
			if (!tokenTipo.equals(";") && !identificador1.equals("")) {
				errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
				
			}
			
		}else if (!tokenTipo.equals(";")) {
				errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);	
			}else{
				errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
			}
		
	}
	
}

void declaracionVariableCaracter() : {
	int opcion = 0;
	String tokenTipo, identificador1;
	Token identificador2 = null;
} {
	(<Char>)?{tokenTipo = token.image;}<Identificador>{identificador1=token.image;}
	(<IgualA>{opcion = 1;}(<Identificador> | <Caracter>){identificador2 = token;})?
	{
		if (opcion == 0 || identificador2.kind == 30) {
			if (!tokenTipo.equals(";") && !identificador1.equals("")) {
				errorSemantico = AnalizadorSemantico.declaracionSencilla(tokenTipo, identificador1);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
				
			}
			
		}else if (!tokenTipo.equals(";")) {
				errorSemantico = AnalizadorSemantico.declaracionCompleta(tokenTipo, identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);	
			}else{
				errorSemantico = AnalizadorSemantico.declaracionSinTipo(identificador1, identificador2.image);
				semantico.add(errorSemantico);
				System.out.println(errorSemantico);
			}
		
	}

}

void operacion() : {} {
	operadoresAritmeticos()parametros()
}

void operadoresAritmeticos () : {} {

	<Suma>
	|<Resta>
	|<Multiplicacion>
	|<Division>
	|<Modulo>

}

void estructuraSwitch () : {} {

		<Switch><ParentesisIzquierdo><Identificador><ParentesisDerecho><LlaveIzquierda>casos()(predeterminado())?<LlaveDerecha>
	
}

void casos () : {} {
	(<Case>parametros()<DosPuntos>sentencias()<Break><CierreSentencia>)+
}

void predeterminado() : {} {
	<Default><DosPuntos>sentencias()(<Break><CierreSentencia>)?
}

void estructuraIf () : {} {
	<If><ParentesisIzquierdo><Identificador>condiciones()(condicionesAdicionales())?<ParentesisDerecho><LlaveIzquierda>sentencias()(estructuraElse())?<LlaveDerecha>
}

void estructuraElse() : {}{
	<Else>sentencias()
}

void condicionesAdicionales() : {} {
	(tokensOperadoresLogicos()<Identificador>condiciones())+
}

void tokensOperadoresLogicos() : {} {
	<And> | <Or>
}

void condiciones() : {} {
	condicionBooleana()|condicionAritmetica()
}

void condicionBooleana() : {} {
	(parametro()signosComparacion()parametro())|(<True>|<False>)
}

void condicionAritmetica () : {} {
	signosComparacion()(<Identificador>|<Entero>)
}


void estructuraWhile () : {}{
	<While><ParentesisIzquierdo><Identificador>(condicionBooleana()|condicionAritmetica())(condicionesAdicionales())?<ParentesisDerecho><LlaveIzquierda>sentencias()<LlaveDerecha>
}

void estructuraDoWhile() : {}{
	<Do><LlaveIzquierda>sentencias()<LlaveDerecha><While><ParentesisIzquierdo><Identificador>(condicionBooleana()|condicionAritmetica())(condicionesAdicionales())?<ParentesisDerecho>
}


void estructuraFor () : {} {
	<For><ParentesisIzquierdo>(<Integer> | <Float>)?<Identificador><IgualA><Entero><CierreSentencia>
	<Identificador>signosComparacion()<Entero><CierreSentencia><Identificador>asignacionesFor()<ParentesisDerecho>
	<LlaveIzquierda>sentencias()<LlaveDerecha>
}

void signosComparacion () : {} {

	<IgualQue>
	|<DiferenteQue>
	|<MenorQue>
	|<MenorIgualQue>
	|<MayorQue>
	|<MayorIgualQue>
	
}

void asignacionesFor () : {} {
	
	asignacionVariablesFor()
	|<Incremento>
	|<Decremento>
	
}

void asignacionVariablesFor () : {} {
	<SumaIgualA>(<Identificador>|<Entero>)
	|<RestaIgualA>(<Identificador>|<Entero>)
	|<MultiplicacionIgualA>(<Identificador>|<Entero>)
	|<DivisionIgualA>(<Identificador>|<Entero>)
	|<ModuloIgualA>(<Identificador>|<Entero>)
}

void analizadorLexico() : {} {
	(cabecera())+cuerpoProyecto()<EOF>
}
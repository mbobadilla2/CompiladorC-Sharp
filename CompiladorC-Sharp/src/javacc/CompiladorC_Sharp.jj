options{
	STATIC = false;
}
PARSER_BEGIN(CompiladorC_Sharp)
	public class CompiladorC_Sharp{
		static ArrayList<String> lista = new ArrayList();
		static ArrayList<String> errores = new ArrayList();
		private int linea = 1;

		public static void main(String[] args) throws ParseException {
			try{
				CompiladorC_Sharp csharp = new CompiladorC_Sharp(System.in);
				csharp.analizadorLexico();
			} catch(ParseException e){
				System.out.println(e.getMessage());
			}
		}

		public ArrayList<String> getLista(){
			return lista;
		}

		public ArrayList<String> getErrores(){
			return errores;
		}
	}
PARSER_END(CompiladorC_Sharp)

//Tokens

//Tokens principales


//Tokens palabras de acceso/reservadas
TOKEN : {
	<Namespace : "namespace"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Using : "using"> {
		System.out.println("Importacion de libreria -> " + image);
		lista.add("Importacion de libreria -> " + image);
	}
	|<Clase : "class"> {
		System.out.println("Declaracion de clase -> " + image);
		lista.add("Declaracion de clase -> " + image);
	}
	|<Privado : "private"> {
		System.out.println("Acceso Privado -> " + image);
		lista.add("Acceso Privado -> " + image);
	}
	|<Publico : "public"> {
		System.out.println("Acceso Publico -> " + image);
		lista.add("Acceso Publico -> " + image);
	}
	|<Protegido : "protected"> {
		System.out.println("Acceso Protegido -> " + image);
		lista.add("Acceso Protegido -> " + image);
	}
	|<Funcion : "funcion"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Main : "Main"> {
		System.out.println("Nombre funcion principal -> " + image);
		lista.add("Nombre funcion principal -> " + image);
	}
	|<Retorno : "return"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Pablabra reservada -> " + image);
	}
	|<Goto : "goto"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Pablabra reservada -> " + image);
	}
	|<If : "if"> {
		System.out.println("Condicional -> " + image);
		lista.add("Condicional -> " + image);
	}
	|<Else : "else"> {
		System.out.println("Condicional -> " + image);
		lista.add("Condicional -> " + image);
	}
	|<For : "for"> {
		System.out.println("Ciclo -> " + image);
		lista.add("Ciclo -> " + image);
	}
	|<Do : "do"> {
		System.out.println("Ciclo -> " + image);
		lista.add("Ciclo -> " + image);
	}
	|<While : "while"> {
		System.out.println("Ciclo -> " + image);
		lista.add("Ciclo -> " + image);
	}
	|<Switch : "switch"> {
		System.out.println("Condicional -> " + image);
		lista.add("Condicional -> " + image);
	}
	|<Case : "case"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Break : "break"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Default : "default"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Continue : "continue"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Void : "void"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	|<Static : "static"> {
		System.out.println("Palabra reservada -> " + image);
		lista.add("Palabra reservada -> " + image);
	}
	
}

//Palabras reservadas para datos
TOKEN : {
	<Integer: "int"> {
		System.out.println("Tipo de variable -> " + image + "(Entero)");
		lista.add("Tipo de variable -> " + image + "(Entero)");
	}
	|<Float: "float"> {
		System.out.println("Tipo de variable -> " + image + "(Flotante)");
		lista.add("Tipo de variable -> " + image + "(Flotante)");
	}
	|<String: "string"> {
		System.out.println("Tipo de variable -> " + image + "(Cadena)");
		lista.add("Tipo de variable -> " + image + "(Cadena)");
	}
	|<Char: "char"> {
		System.out.println("Tipo de variable -> " + image + "(Caracter)");
		lista.add("Tipo de variable -> " + image + "(Caracter)");
	}
	|<Booleano: "bool"> {
		System.out.println("Tipo de variable -> " + image + "(Caracter)");
		lista.add("Tipo de variable -> " + image + "(Caracter)");
	}

}

//Tipo de datos
TOKEN : {
	<Entero : (["0"-"9"])+> {
		System.out.println("Tipo de dato entero -> " + image);
		lista.add("Tipo de dato entero -> " + image);
	}
	|<Cadena : (["\""](["a"-"z","A"-"Z","0"-"9"," ","!"-"?"])*["\""])> {
		System.out.println("Tipo de dato String -> " + image);
		lista.add("Tipo de dato String -> " + image);
	}
	|<Caracter : (["'"]["a"-"z","A"-"Z","0"-"9"," "]["'"])> {
		System.out.println("Tipo de dato caracter -> " + image);
		lista.add("Tipo de dato caracter -> " + image);
	}
	|<Flotante : ((["0"-"9"])+["."](["0"-"9"])+)+> {
		System.out.println("Tipo de dato flotante -> " + image);
		lista.add("Tipo de dato flotante -> " + image);
	}
	|<True : "true"> {
		System.out.println("Tipo de dato Booleano -> " + image);
		lista.add("Tipo de dato Booleano -> " + image);
	}
	|<False : "false"> {
		System.out.println("Tipo de dato Booleano " + image);
		lista.add("Tipo de dato Booleano -> " + image);
	}
	|<Nulo : "null"> {
		System.out.println("Tipo de dato nulo -> " + image);
		lista.add("Tipo de dato nulo -> " + image);
	}
}

//Token metodos cools basics

TOKEN : {
	<Console : "Console"> {
		System.out.println("Refencia a clase -> " + image);
		lista.add("Refencia a clase -> " + image);
	}
	|<WriteLine : "WriteLine"> {
		System.out.println("Metodo de escritura -> " + image);
		lista.add("Metodo de escritura -> " + image);
	}
	|<Write : "Write"> {
		System.out.println("Metodo de escritura -> " + image);
		lista.add("Metodo de escritura -> " + image);
	}
	|<ReadLine : "ReadLine"> {
		System.out.println("Metodo de lectura -> " + image);
		lista.add("Metodo de lectura -> " + image);
	}
	|<ReadKey : "ReadKey"> {
		System.out.println("Metodo de lectura -> " + image);
		lista.add("Metodo de lectura -> " + image);
	}
}

//Tokens de puntuacion

TOKEN : {
	<LlaveIzquierda : "{"> {
		System.out.println("Llave Izquierda -> " + image);
		lista.add("Llave Izquierda -> " + image);
	}
	|<LlaveDerecha : "}"> {
		System.out.println("Llave Derecha -> " + image);
		lista.add("Llave Derecha -> " + image);
	}
	|<ParentesisDerecho : ")"> {
		System.out.println("Parentesis -> " + image);
		lista.add("Parentesis -> " + image);
	}
	|<ParentesisIzquierdo : "(" > {
		System.out.println("Parentesis -> " + image);
		lista.add("Parentesis -> " + image);
	}
	|<CierreSentencia : ";"> {
		System.out.println("Cierre de sentencia -> " + image);
		lista.add("Cierre de sentencia -> " + image);
	}
	|<Punto : "."> {
		System.out.println("Punto -> " + image);
		lista.add("Punto -> " + image);
	}
	|<DosPuntos : ":"> {
		System.out.println("Dos puntos -> " + image);
		lista.add("Dos puntos -> " + image);
	}
	|<Coma : ","> {
		System.out.println("Coma -> " + image);
		lista.add("Coma -> " + image);
	}
	|<CorcheteIzquierdo : "["> {
		System.out.println("CorcheteIzquierdo -> " + image);
		lista.add("CorcheteIzquierdo -> " + image);
	}
	|<CorcheteDerecho : "]"> {
		System.out.println("CorcheteDerecho -> " + image);
		lista.add("CorcheteDerecho -> " + image);
	}
}

//Tokens para operaciones aritmeticas
TOKEN : {
	<Suma : "+"> {
		System.out.println("Operador aritmetico suma -> " + image);
		lista.add("Operador aritmetico suma -> " + image);
	}
	|<Resta : "-"> {
		System.out.println("Operador aritmetico resta -> " + image);
		lista.add("Operador aritmetico -> resta " + image);
	}
	|<Multiplicacion : "*"> {
		System.out.println("Operador aritmetico multiplicacion -> " + image);
		lista.add("Operador aritmetico multiplicacion -> " + image);
	}
	|<Division : "/"> {
		System.out.println("Operador aritmetico division -> " + image);
		lista.add("Operador aritmetico division -> " + image);
	}
	|<Modulo : "%"> {
		System.out.println("Operador aritmetico modulo -> " + image);
		lista.add("Operador aritmetico modulo -> " + image);
	}
}

//Toneks para asignaciones
TOKEN : {
	<IgualA : "="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<SumaIgualA : "+="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<RestaIgualA : "-="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<MultiplicacionIgualA : "*="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<DivisionIgualA : "/="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<ModuloIgualA : "%="> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<Incremento : "++"> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
	|<Decremento : "--"> {
		System.out.println("Asignacion -> " + image);
		lista.add("Asignacion -> " + image);
	}
}

//Tokens operadores relacionales
TOKEN : {
	<IgualQue : "=="> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
	|<MenorQue : "<"> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
	|<MayorQue : ">"> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
	|<MenorIgualQue : "<="> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
	|<MayorIgualQue : ">="> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
	|<DiferenteQue : "!="> {
		System.out.println("Operador Relacional -> " + image);
		lista.add("Operador Relacional -> " + image);
	}
}

//Tokens operadores logicos
TOKEN : {
	<And : "&&"> {
		System.out.println("Operador Logico -> " + image);
		lista.add("Operador Logico -> " + image);
	}
	|<Or : "||"> {
		System.out.println("Operador Logico -> " + image);
		lista.add("Operador Logico -> " + image);
	}
}

//Token para identificadores
TOKEN : {
	<Identificador : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_"])*> {
		System.out.println("Identificador -> " + image);
		lista.add("Identificador -> " + image);
	}
}

//Token comentarios
TOKEN : {
	<ComentarioLinea : "//" > {
		System.out.println("Comentario de una linea -> " + image);
		lista.add("Comentario de una linea -> " + image);
	}
	|<ComentarioInicio : ("/*" | "/**") > {
		System.out.println("Comentario de parrafo inicio -> " + image);
		lista.add("Comentario de parrafo inicio -> " + image);
	}
	|<ComentarioTermino : "*/" > {
		System.out.println("Comentario de parrafo termino -> " + image);
		lista.add("Comentario de parrafo termino -> " + image);
	}
}

SKIP : {
	" "
	|"\r"
	|"\t"
	|"\n"
}


void cabecera() : {} {
	(try{
		<Using>
	}catch(ParserException e){
		errore.add("No se encontró la clausula \"using\" en la línea " + linea);
	})
	(try{
			<Identificador>
	}catch(ParserException e){
		errores.add("Error, se esperaba el nombre de una clase en la línea " + linea);
	})
	(try{
		<Punto>(try{
					<Identificador>
				}catch(ParserException e){
					errores.add("Error, se esperaba el nombre de una clase en la línea " + linea);
				})

	}catch(ParserException e){
		errores.add("Error, se esperaba un punto (.) en la línea " + linea);
	})*
	(try{
		<CierreSentencia>
	}catch(ParserException e){
		errores.add("Error, se esperaba un punto y coma (;) en la línea " + linea);
	})

	
}

void cuerpoProyecto() : {} {
	(try{
		<Namespace>
	}catch(ParseException e){
		errores.add("Error, no se encontró la clausula namespace en la línea " + linea);
	})
	(try{
		<Identificador>
	}catch(ParserException e){
		errores.add("Error, no se encontró un identificador para el namespace en la línea " + linea);
	})
	(try{
		<LlaveIzquierda>
	}catch(ParserException e){
		errores.add("Error, falta una llave de apertura ({) en la línea " + linea);
	})
	cuerpoClase()
	(try{
		<LlaveDerecha>
	}catch(ParserException e){
		errores.add("Error, falta una llave de cierre (}) en la línea " + linea);
	})

	
}

void cuerpoClase() : {} {

	(try{
		<Clase>
	}catch(ParseException e){
		errores.add("Error, no se encuentra la clausula class en la línea " + linea);
	})
	(try{
		<Identificador>
	}catch(ParseException e){
		errores.add("Error, no existe un identificador para la clase en la línea " + linea);
	})
	(try{
		<LlaveIzquierda>
	}catch(ParseException e){
		errores.add("Error, falta una llave de apertura ({) en la línea " + linea);
	})
	metodoMain()
	(try{
		<LlaveDerecha>
	}catch(ParseException e){
		errores.add("Error, falta una llave de cierre (}) en la línea " + linea);
	})

}

void metodoMain() : {} {

	(try{
		<Static>
	}catch(ParseException e){
		errores.add("Error, es necesaria la clausula \"static\" para el método Main en la línea " + linea);
	})
	(try{
		<Void>
	}catch(ParserException e){
		errores.add("Error, es necesaria la clausula \"void\" para el método Main en la línea " + linea);
	})
	(try{
		<Main>
	}catch(ParserException e){
		errores.add("Error, es necesaria la clausula \"Main\" para el método Main en la línea " + linea);
	})
	(try{
		<ParentesisIzquierdo>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de apertura en la línea " + linea);
	})
	(try{
		<String>(try{
					<CorcheteIzquierdo>(try{
											<CorcheteDerecho>
										}catch(ParserException e){
											errores.add("Error, falta un Corchete de cierre en la línea " + linea);
										})
				}catch(ParserException e){
					errores.add("Error, falta un Corchete de apertura en la línea " + linea);
				})
	}catch(ParserException e){
		errores.add("Error, es necesaria declarar un arreglo de String en la línea " + linea);
	})
	(try{
		<Identificador>
	}catch(ParserException e){
		errores.add("Error, es necesario un identificador en la línea " + linea);
	})
	(try{
		<ParentesisDerecho>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de cierre en la línea " + linea);
	})
	(try{
		<LlaveIzquierda>
	}catch(ParserException e){
		errores.add("Error, falta una llave de apertura en la línea " + linea);
	})
	sentencias()
	(try{
		<LlaveDerecha>
	}catch(ParserException e){
		errores.add("Error, falta una llave de cierre en la línea " + linea);
	})

}

void sentencias() : {} {
	(estructuraFor()
	|estructuraIf()
	|estructuraWhile()
	|estructuraDoWhile()
	|declaracionVariable()(try{
								<CierreSentencia>
							}catch(ParserException e){
								errores.add("Error, falta un punto y coma (;) para cerrar la sentencia en la línea " + linea);
							})
	|
	(try{
		<Console>
	}catch(ParserException e){
		errores.add("Error, falta la clase Console para usar sus metodos en la línea " + linea);
	})
	(try{
		<Punto>
	}catch(ParserException e){
		errores.add("Error, es necesario un punto (.) en la línea " + linea);
	})
	(lectura() | escritura())
	(try{
		<CierreSentencia>
	}catch(ParserException e){
		errores.add("Error, falta un punto y coma (;) para cerrar la sentencia en la línea " + linea);
	}))*
}

void escritura() : {} {

	(try{
		<Write>
	}catch(ParserException e){
		errores.add("Error, metodo mal escrito o inexistente en la línea " + linea);
	})
	(try{
		<ParentesisIzquierdo>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de apertura en la línea " + linea);
	})
	parametro()
	(try{
		<ParentesisDerecho>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de cierre en la línea " + linea);
	})

	|

	(try{
		<WriteLine>
	}catch(ParserException e){
		errores.add("Error, metodo mal escrito o inexistente en la línea " + linea);
	})
	(try{
		<ParentesisIzquierdo>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de apertura en la línea " + linea);
	})
	parametro()
	(try{
		<ParentesisDerecho>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de cierre en la línea " + linea);
	})

	
}

void parametro() : {} {

	(try{
		<Identificador>
		|<Entero>
		|<Cadena>
		|<Caracter>
		|<Flotante>
		|<Booleano>

	}catch(ParserException e){
		errores.add("Error, faltan parametros en la línea " + linea);
	})
	
	}

void parametros() : {} {
	parametro()((try{
					<Coma>
				}catch(ParserException e){
					errores.add("Error, falta una coma para agregar mas parametros en la línea " + linea);
				}) parametro())*
}

void lectura() : {} {

	(try{
		<Read>
	}catch(ParserException e){
		errores.add("Error, metodo mal escrito o inexistente en la línea " + linea);
	})
	(try{
		<ParentesisIzquierdo>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de apertura en la línea " + linea);
	})
	(try{
		<ParentesisDerecho>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de cierre en la línea " + linea);
	})

	|

	(try{
		<ReadLine>
	}catch(ParserException e){
		errores.add("Error, metodo mal escrito o inexistente en la línea " + linea);
	})
	(try{
		<ParentesisIzquierdo>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de apertura en la línea " + linea);
	})
	(try{
		<ParentesisDerecho>
	}catch(ParserException e){
		errores.add("Error, falta un Parentesis de cierre en la línea " + linea);
	})

	
}

void declaracionVariable() : {} {
	declaracionVariableBooleana()
	|declaracionVariableEntera()
	|declaracionVariableCadena()
	|declaracionVariableCaracter()
	|declaracionVariableFlotante()
	
}

void declaracionVariableBooleana() : {} {
	<Booleano><Identificador>(<IgualA>(<True> | <False> | <Identificador> | <Nulo>))?
}

void declaracionVariableEntera() : {} {
	<Integer><Identificador>(<IgualA>(<Identificador> | <Entero> | operacion()))?
}

void declaracionVariableFlotante() : {} {
	<Float><Identificador>(<IgualA>(<Identificador> | <Flotante> | operacion()))?
}

void declaracionVariableCadena() : {} {
	<String><Identificador>(<IgualA>(<Identificador> | <Cadena>))?
}

void declaracionVariableCaracter() : {} {
	<Char><Identificador>(<IgualA>(<Identificador> | <Caracter>))?
}

void operacion() : {} {
	operadoresAritmeticos()(parametros())+
}

void operadoresAritmeticos () : {} {

	(try{
		<Suma>
		|<Resta>
		|<Multiplicacion>
		|<Division>
		|<Modulo>

	}catch(ParserException e){
		errores.add("Error, falta un operador aritmetico en la línea " + linea);
	})

}

void estructuraSwitch () : {} {

	(try{
		<Switch>
	}catch(ParserException e){
		errores.add("Error, falta un identificador en la línea " + linea);
	})

	<Switch><ParentesisIzquierdo><Identificador><ParentesisDerecho><LlaveIzquierda>casos()(predeterminado())?<LlaveDerecha>
}

void casos () : {} {
	(<Case>parametros()<DosPuntos>sentencias()<Break><CierreSentencia>)+
}

void predeterminado() : {} {
	<Default><DosPuntos>sentencias()(<Break><CierreSentencia>)?
}

void estructuraIf () : {} {
	<If><ParentesisIzquierdo><Identificador>condiciones()(condicionesAdicionales())?<ParentesisDerecho><LlaveIzquierda>sentencias()(estructuraElse())?<LlaveDerecha>
}

void estructuraElse() : {}{
	<Else>sentencias()
}

void condicionesAdicionales() : {} {
	(tokensOperadoresLogicos()<Identificador>condiciones())+
}

void tokensOperadoresLogicos() : {} {
	<And> | <Or>
}

void condiciones() : {} {
	condicionBooleana()|condicionAritmetica()
}

void condicionBooleana() : {} {
	(diferenteIgual())(<True>|<False>)
}

void condicionAritmetica () : {} {
	comparacionesIf()(<Identificador>|<Entero>)
}

void comparacionesIf () : {} {
	comparacionesFor()
}

void diferenteIgual() : {} {
	(<IgualQue>|<DiferenteQue>)
}

void estructuraWhile () : {}{
	<While><ParentesisIzquierdo><Identificador>(condicionBooleana()|condicionAritmetica())(condicionesAdicionales())?<ParentesisDerecho><LlaveIzquierda>sentencias()<LlaveDerecha>
}

void estructuraDoWhile() : {}{
	<Do><LlaveIzquierda>sentencias()<LlaveDerecha><While><ParentesisIzquierdo><Identificador>(condicionBooleana()|condicionAritmetica())(condicionesAdicionales())?<ParentesisDerecho>
}


void estructuraFor () : {} {
	<For><ParentesisIzquierdo>(<Integer> | <Float>)?<Identificador><IgualA><Entero><CierreSentencia>
	<Identificador>comparacionesFor()<Entero><CierreSentencia><Identificador>asignacionesFor()<ParentesisDerecho>
	<LlaveIzquierda>sentencias()<LlaveDerecha>
}

void comparacionesFor () : {} {
	(try{
		<MenorQue>
		|<MenorIgualQue>
		|<MayorQue>
		|<MayorIgualQue>
	}catch(ParserException e){
		errores.add("Error, falta un simbolo de comparacion en la línea " + linea);
	})

	
}

void asignacionesFor () : {} {
	asignacionVariablesFor()
	|
	(try{
		<Incremento>
	}catch(ParserException e){
		errores.add("Error, falta incremento en la línea " + linea);
	})
	|
	(try{
		<Decremento>
	}catch(ParserException e){
		errores.add("Error, falta decremento en la línea " + linea);
	})
	
}

void asignacionVariablesFor () : {} {
	<SumaIgualA>(<Identificador>|<Entero>)
	|<RestaIgualA>(<Identificador>|<Entero>)
	|<MultiplicacionIgualA>(<Identificador>|<Entero>)
	|<DivisionIgualA>(<Identificador>|<Entero>)
	|<ModuloIgualA>(<Identificador>|<Entero>)
}

void analizadorLexico() : {} {
	cabecera()cuerpoProyecto()<EOF>
}